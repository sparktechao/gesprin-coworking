datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ContractStatus {
  ACTIVE
  INACTIVE
  EXPIRING
  DRAFT
}

enum NotificationPreference {
  SMS
  EMAIL
  PHONE
}

enum ContractType {
  ROOM
  DESK
  VIRTUAL
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  CANCELED
}

model Coworker {
  id                      String                   @id @default(uuid())
  name                    String
  email                   String                   @unique
  phone                   String
  nif                     String
  commercialCertificate   String
  notificationPreferences NotificationPreference[]
  contracts               Contract[]               @relation("CoworkerContracts")
  printJobs               PrintJob[]
  reservations            Reservation[]
}

model Room {
  id           String        @id @default(uuid())
  name         String
  location     String
  workstations Workstation[]
  contracts    Contract[]
  reservations Reservation[]
}

model Workstation {
  id            String     @id @default(uuid())
  roomId        String
  stationNumber String
  room          Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  contracts     Contract[] @relation("WorkstationToContract")
  contractId    String?
}

model Contract {
  id                 String          @id @default(uuid())
  coworkerId         String
  nuc                String
  startDate          DateTime
  endDate            DateTime
  contractType       ContractType    @default(VIRTUAL)
  previousContractId String?
  roomId             String?
  status             ContractStatus
  coworker           Coworker        @relation("CoworkerContracts", fields: [coworkerId], references: [id], onDelete: Restrict)
  room               Room?           @relation(fields: [roomId], references: [id], onDelete: SetNull)
  contractValues     ContractValue[]
  invoices           Invoice[]
  workstation        Workstation[]   @relation("WorkstationToContract")

  @@index([coworkerId])
  @@index([nuc])
}

model ContractValue {
  id          String   @id @default(uuid())
  contractId  String
  createdAt   DateTime @default(now())
  amount      Float
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Restrict)

  @@index([contractId])
}


model Invoice {
  id            String         @id @default(uuid())
  contractId    String
  issueDate     DateTime
  amount        Float
  contract      Contract        @relation(fields: [contractId], references: [id])
  payments      Payment[]
  status        InvoiceStatus   @default(UNPAID)
  reference     String
  coveredMonths String[]

  @@index([contractId])
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id          String   @id @default(uuid())
  invoiceId   String
  paymentDate DateTime
  amountPaid  Float
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Restrict)

  @@index([invoiceId])
}

model PrintJob {
  id         String   @id @default(uuid())
  coworkerId String
  printDate  DateTime
  pageCount  Int
  coworker   Coworker @relation(fields: [coworkerId], references: [id])

  @@index([coworkerId])
}

model Reservation {
  id         String   @id @default(uuid())
  roomId     String
  coworkerId String
  startTime  DateTime
  endTime    DateTime
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  coworker   Coworker @relation(fields: [coworkerId], references: [id], onDelete: Restrict)

  @@index([roomId])
  @@index([coworkerId])
}
